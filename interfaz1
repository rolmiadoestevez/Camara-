import sys
import os
import random
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QGridLayout, QLabel, QPushButton, 
                            QFrame, QListWidget, QListWidgetItem, QSplitter,
                            QStatusBar, QToolBar, QDialog, QCheckBox, 
                            QSpinBox, QComboBox, QTabWidget, QProgressBar,
                            QMessageBox, QGroupBox, QScrollArea, QAction)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal, QSize, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QFont, QPalette, QColor, QIcon, QPixmap, QPainter

class CameraWidget(QFrame):
    def __init__(self, camera_id, name, location):
        super().__init__()
        self.camera_id = camera_id
        self.name = name
        self.location = location
        self.is_recording = False
        self.is_online = True
        self.audio_enabled = False
        self.image_rotated = False
        self.mirror_enabled = False
        self.ptz_enabled = False
        
        self.setup_ui()
        self.apply_modern_style()
        
        # Configurar efecto hover
        self.setMouseTracking(True)
        self.enterEvent = self.on_enter
        self.leaveEvent = self.on_leave
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(1, 1, 1, 1)
        layout.setSpacing(0)
        
        # Header moderno
        header = QWidget()
        header.setFixedHeight(40)
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(15, 0, 15, 0)
        header_layout.setSpacing(10)
        
        # Indicador de estado
        self.status_indicator = QLabel("‚óè")
        self.status_indicator.setFixedSize(12, 12)
        
        # Informaci√≥n de la c√°mara
        camera_info = QWidget()
        camera_layout = QVBoxLayout(camera_info)
        camera_layout.setContentsMargins(0, 0, 0, 0)
        camera_layout.setSpacing(2)
        
        self.name_label = QLabel(self.name)
        self.name_label.setFont(QFont("Segoe UI", 10, QFont.Bold))
        
        self.location_label = QLabel(self.location)
        self.location_label.setFont(QFont("Segoe UI", 8))
        
        camera_layout.addWidget(self.name_label)
        camera_layout.addWidget(self.location_label)
        
        header_layout.addWidget(self.status_indicator)
        header_layout.addWidget(camera_info)
        header_layout.addStretch()
        
        # Indicador de grabaci√≥n
        self.recording_indicator = QLabel("‚è∫Ô∏è GRABANDO")
        self.recording_indicator.setFont(QFont("Segoe UI", 8))
        self.recording_indicator.setVisible(False)
        
        header_layout.addWidget(self.recording_indicator)
        
        # √Årea de video principal con controles
        self.video_container = QFrame()
        video_layout = QHBoxLayout(self.video_container)
        video_layout.setContentsMargins(0, 0, 0, 0)
        video_layout.setSpacing(0)
        
        # Widget de video
        self.video_widget = QLabel()
        self.video_widget.setAlignment(Qt.AlignCenter)
        self.video_widget.setMinimumSize(300, 200)
        
        # Panel de controles derecho (iconos)
        self.controls_panel = QFrame()
        self.controls_panel.setFixedWidth(50)
        controls_layout = QVBoxLayout(self.controls_panel)
        controls_layout.setContentsMargins(5, 20, 5, 20)
        controls_layout.setSpacing(15)
        controls_layout.setAlignment(Qt.AlignCenter)
        
        # Iconos de control
        self.audio_icon = self.create_control_icon("üîá", "Activar/Desactivar audio")
        self.rotate_icon = self.create_control_icon("üîÑ", "Rotar imagen")
        self.mirror_icon = self.create_control_icon("ü™û", "Modo espejo")
        self.ptz_icon = self.create_control_icon("üéÆ", "Controles PTZ")
        
        # Conectar eventos de clic
        self.audio_icon.mousePressEvent = lambda e: self.toggle_audio()
        self.rotate_icon.mousePressEvent = lambda e: self.toggle_rotation()
        self.mirror_icon.mousePressEvent = lambda e: self.toggle_mirror()
        self.ptz_icon.mousePressEvent = lambda e: self.toggle_ptz()
        
        controls_layout.addWidget(self.audio_icon)
        controls_layout.addWidget(self.rotate_icon)
        controls_layout.addWidget(self.mirror_icon)
        controls_layout.addWidget(self.ptz_icon)
        controls_layout.addStretch()
        
        video_layout.addWidget(self.video_widget, 1)
        video_layout.addWidget(self.controls_panel)
        
        # Panel de controles PTZ (inicialmente oculto)
        self.ptz_controls = self.create_ptz_controls()
        self.ptz_controls.setVisible(False)
        
        layout.addWidget(header)
        layout.addWidget(self.video_container)
        
        self.update_display()
        
    def create_control_icon(self, icon, tooltip):
        icon_label = QLabel(icon)
        icon_label.setFixedSize(35, 35)
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setToolTip(tooltip)
        icon_label.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.2);
                border: 1px solid rgba(255, 255, 255, 0.3);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 16px;
            }
        """)
        icon_label.setMouseTracking(True)
        icon_label.enterEvent = lambda e: self.on_icon_enter(icon_label)
        icon_label.leaveEvent = lambda e: self.on_icon_leave(icon_label)
        return icon_label
        
    def create_ptz_controls(self):
        ptz_frame = QFrame(self.video_widget)
        ptz_frame.setGeometry(10, 10, 120, 160)
        ptz_frame.setStyleSheet("""
            QFrame {
                background-color: rgba(42, 112, 194, 0.85);
                border: 2px solid rgba(255, 255, 255, 0.6);
                border-radius: 12px;
            }
        """)
        
        ptz_layout = QGridLayout(ptz_frame)
        ptz_layout.setContentsMargins(8, 8, 8, 8)
        ptz_layout.setSpacing(5)
        
        # Botones PTZ
        btn_style = """
            QLabel {
                background-color: rgba(255, 255, 255, 0.9);
                border: 1px solid rgba(255, 255, 255, 0.6);
                border-radius: 6px;
                color: #2a70c2;
                font-size: 14px;
                font-weight: bold;
                padding: 5px;
            }
            QLabel:hover {
                background-color: rgba(255, 255, 255, 1);
                border: 2px solid rgba(255, 255, 255, 0.8);
            }
        """
        
        # Crear botones de direcci√≥n
        up_btn = QLabel("‚Üë")
        up_btn.setAlignment(Qt.AlignCenter)
        up_btn.setFixedSize(30, 30)
        up_btn.setStyleSheet(btn_style)
        up_btn.mousePressEvent = lambda e: self.ptz_command("up")
        
        left_btn = QLabel("‚Üê")
        left_btn.setAlignment(Qt.AlignCenter)
        left_btn.setFixedSize(30, 30)
        left_btn.setStyleSheet(btn_style)
        left_btn.mousePressEvent = lambda e: self.ptz_command("left")
        
        right_btn = QLabel("‚Üí")
        right_btn.setAlignment(Qt.AlignCenter)
        right_btn.setFixedSize(30, 30)
        right_btn.setStyleSheet(btn_style)
        right_btn.mousePressEvent = lambda e: self.ptz_command("right")
        
        down_btn = QLabel("‚Üì")
        down_btn.setAlignment(Qt.AlignCenter)
        down_btn.setFixedSize(30, 30)
        down_btn.setStyleSheet(btn_style)
        down_btn.mousePressEvent = lambda e: self.ptz_command("down")
        
        center_btn = QLabel("‚Ä¢")
        center_btn.setAlignment(Qt.AlignCenter)
        center_btn.setFixedSize(30, 30)
        center_btn.setStyleSheet(btn_style)
        center_btn.mousePressEvent = lambda e: self.ptz_command("center")
        
        # Botones de zoom
        zoom_in_btn = QLabel("üîç+")
        zoom_in_btn.setAlignment(Qt.AlignCenter)
        zoom_in_btn.setFixedSize(45, 25)
        zoom_in_btn.setStyleSheet(btn_style)
        zoom_in_btn.mousePressEvent = lambda e: self.ptz_command("zoom_in")
        
        zoom_out_btn = QLabel("üîç-")
        zoom_out_btn.setAlignment(Qt.AlignCenter)
        zoom_out_btn.setFixedSize(45, 25)
        zoom_out_btn.setStyleSheet(btn_style)
        zoom_out_btn.mousePressEvent = lambda e: self.ptz_command("zoom_out")
        
        # Distribuir en grid
        ptz_layout.addWidget(up_btn, 0, 1)
        ptz_layout.addWidget(left_btn, 1, 0)
        ptz_layout.addWidget(center_btn, 1, 1)
        ptz_layout.addWidget(right_btn, 1, 2)
        ptz_layout.addWidget(down_btn, 2, 1)
        ptz_layout.addWidget(zoom_in_btn, 3, 0, 1, 2)
        ptz_layout.addWidget(zoom_out_btn, 3, 2, 1, 2)
        
        return ptz_frame
        
    def on_icon_enter(self, icon):
        icon.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.4);
                border: 2px solid rgba(255, 255, 255, 0.6);
                border-radius: 8px;
                color: rgba(255, 255, 255, 1);
                font-size: 16px;
            }
        """)
        
    def on_icon_leave(self, icon):
        icon.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 255, 255, 0.2);
                border: 1px solid rgba(255, 255, 255, 0.3);
                border-radius: 8px;
                color: rgba(255, 255, 255, 0.8);
                font-size: 16px;
            }
        """)
        
    def toggle_audio(self):
        self.audio_enabled = not self.audio_enabled
        if self.audio_enabled:
            self.audio_icon.setText("üîä")
            self.audio_icon.setToolTip("Audio activado - Click para desactivar")
        else:
            self.audio_icon.setText("üîá")
            self.audio_icon.setToolTip("Audio desactivado - Click para activar")
        self.update_icon_states()
        
    def toggle_rotation(self):
        self.image_rotated = not self.image_rotated
        if self.image_rotated:
            self.rotate_icon.setStyleSheet("""
                QLabel {
                    background-color: rgba(74, 144, 226, 0.6);
                    border: 2px solid rgba(255, 255, 255, 0.8);
                    border-radius: 8px;
                    color: rgba(255, 255, 255, 1);
                    font-size: 16px;
                }
            """)
            self.rotate_icon.setToolTip("Rotaci√≥n activada - Click para desactivar")
        else:
            self.on_icon_leave(self.rotate_icon)
            self.rotate_icon.setToolTip("Rotar imagen")
        self.update_icon_states()
        
    def toggle_mirror(self):
        self.mirror_enabled = not self.mirror_enabled
        if self.mirror_enabled:
            self.mirror_icon.setStyleSheet("""
                QLabel {
                    background-color: rgba(74, 144, 226, 0.6);
                    border: 2px solid rgba(255, 255, 255, 0.8);
                    border-radius: 8px;
                    color: rgba(255, 255, 255, 1);
                    font-size: 16px;
                }
            """)
            self.mirror_icon.setToolTip("Modo espejo activado - Click para desactivar")
        else:
            self.on_icon_leave(self.mirror_icon)
            self.mirror_icon.setToolTip("Modo espejo")
        self.update_icon_states()
        
    def toggle_ptz(self):
        self.ptz_enabled = not self.ptz_enabled
        self.ptz_controls.setVisible(self.ptz_enabled)
        if self.ptz_enabled:
            self.ptz_icon.setStyleSheet("""
                QLabel {
                    background-color: rgba(74, 144, 226, 0.6);
                    border: 2px solid rgba(255, 255, 255, 0.8);
                    border-radius: 8px;
                    color: rgba(255, 255, 255, 1);
                    font-size: 16px;
                }
            """)
            self.ptz_icon.setToolTip("Controles PTZ activados - Click para ocultar")
        else:
            self.on_icon_leave(self.ptz_icon)
            self.ptz_icon.setToolTip("Controles PTZ")
        self.update_icon_states()
        
    def ptz_command(self, command):
        commands = {
            "up": "Moviendo hacia arriba",
            "down": "Moviendo hacia abajo", 
            "left": "Moviendo hacia izquierda",
            "right": "Moviendo hacia derecha",
            "center": "Centrando c√°mara",
            "zoom_in": "Zoom acercando",
            "zoom_out": "Zoom alejando"
        }
        print(f"C√°mara {self.name}: {commands[command]}")
        
    def update_icon_states(self):
        # Actualizar estado de iconos basado en sus estados actuales
        pass
        
    def apply_modern_style(self):
        # Estilo base con tema azul claro
        base_style = """
            CameraWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f0f8ff, stop:1 #e6f3ff);
                border: 2px solid #b8d4f0;
                border-radius: 12px;
            }
            QLabel {
                background: transparent;
                color: #2c5aa0;
            }
        """
        
        header_style = """
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #d8e8ff, stop:1 #c8e0ff);
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
                border-bottom: 1px solid #b8d4f0;
            }
        """
        
        video_style = """
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e6f2ff, stop:1 #d9ebff);
                border-bottom-left-radius: 10px;
                border-bottom-right-radius: 10px;
            }
            QLabel {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ccdfff, stop:1 #b8d4ff);
                color: #2c5aa0;
                font-family: Segoe UI;
                font-size: 11px;
                border: 1px solid #a8c8f0;
                border-radius: 8px;
                margin: 10px;
            }
        """
        
        controls_style = """
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(216, 232, 255, 0.7), 
                    stop:1 rgba(184, 212, 240, 0.7));
                border-left: 1px solid #b8d4f0;
                border-bottom-right-radius: 10px;
            }
        """
        
        self.setStyleSheet(base_style)
        self.findChild(QWidget).setStyleSheet(header_style)
        self.video_container.setStyleSheet(video_style)
        self.controls_panel.setStyleSheet(controls_style)
        
    def apply_hover_style(self):
        # Estilo cuando el mouse est√° sobre la c√°mara
        hover_style = """
            CameraWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e6f2ff, stop:1 #d4e7ff);
                border: 3px solid #4a90e2;
                border-radius: 12px;
            }
            QLabel {
                background: transparent;
                color: #1c4a80;
            }
        """
        
        header_hover_style = """
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #c8e0ff, stop:1 #b8d8ff);
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
                border-bottom: 2px solid #4a90e2;
            }
        """
        
        self.setStyleSheet(hover_style)
        self.findChild(QWidget).setStyleSheet(header_hover_style)
        
    def apply_recording_style(self):
        # Estilo cuando est√° grabando
        recording_style = """
            CameraWidget {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #fff0f0, stop:1 #ffe6e6);
                border: 2px solid #ff6b6b;
                border-radius: 12px;
            }
            QLabel {
                background: transparent;
                color: #cc3333;
            }
        """
        
        self.setStyleSheet(recording_style)
        
    def update_display(self):
        # Actualizar indicador de estado
        if self.is_online:
            self.status_indicator.setStyleSheet("""
                QLabel {
                    color: #4CAF50;
                    font-weight: bold;
                    font-size: 12px;
                }
            """)
            status_text = f"{self.name}\n{self.location}\n‚óè EN L√çNEA"
        else:
            self.status_indicator.setStyleSheet("""
                QLabel {
                    color: #ff6b6b;
                    font-weight: bold;
                    font-size: 12px;
                }
            """)
            status_text = f"{self.name}\n{self.location}\n‚óè OFFLINE"
            
        self.video_widget.setText(status_text)
        
        # Actualizar indicador de grabaci√≥n
        self.recording_indicator.setVisible(self.is_recording)
        
        # Aplicar estilo de grabaci√≥n si es necesario
        if self.is_recording:
            self.apply_recording_style()
        else:
            self.apply_modern_style()
    
    def on_enter(self, event):
        # Efecto hover cuando el mouse entra
        self.apply_hover_style()
        
    def on_leave(self, event):
        # Volver al estilo normal cuando el mouse sale
        if self.is_recording:
            self.apply_recording_style()
        else:
            self.apply_modern_style()
    
    def set_recording(self, recording):
        self.is_recording = recording
        self.update_display()
    
    def set_online(self, online):
        self.is_online = online
        self.update_display()

class SettingsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Configuraci√≥n del Sistema")
        self.setFixedSize(500, 500)
        self.setup_ui()
        self.apply_modern_style()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # T√≠tulo
        title = QLabel("Configuraci√≥n del Sistema")
        title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        
        # Tabs de configuraci√≥n
        tabs = QTabWidget()
        tabs.setFont(QFont("Segoe UI", 9))
        
        # Tab de Grabaci√≥n
        recording_tab = QWidget()
        recording_layout = QVBoxLayout(recording_tab)
        recording_layout.setSpacing(15)
        
        # Configuraci√≥n de grabaci√≥n
        rec_group = QGroupBox("Configuraci√≥n de Grabaci√≥n")
        rec_layout = QVBoxLayout(rec_group)
        rec_layout.setSpacing(10)
        
        self.continuous_rec = QCheckBox("Grabaci√≥n continua")
        self.continuous_rec.setChecked(True)
        
        self.motion_detection = QCheckBox("Detecci√≥n de movimiento")
        self.motion_detection.setChecked(False)
        
        retention_layout = QHBoxLayout()
        retention_layout.addWidget(QLabel("Retenci√≥n (d√≠as):"))
        self.retention_days = QSpinBox()
        self.retention_days.setRange(1, 365)
        self.retention_days.setValue(30)
        retention_layout.addWidget(self.retention_days)
        retention_layout.addStretch()
        
        rec_layout.addWidget(self.continuous_rec)
        rec_layout.addWidget(self.motion_detection)
        rec_layout.addLayout(retention_layout)
        
        recording_layout.addWidget(rec_group)
        recording_layout.addStretch()
        
        # Tab de Visualizaci√≥n
        display_tab = QWidget()
        display_layout = QVBoxLayout(display_tab)
        display_layout.setSpacing(15)
        
        display_group = QGroupBox("Configuraci√≥n de Visualizaci√≥n")
        display_layout_group = QVBoxLayout(display_group)
        display_layout_group.setSpacing(10)
        
        quality_layout = QHBoxLayout()
        quality_layout.addWidget(QLabel("Calidad de video:"))
        self.quality_combo = QComboBox()
        self.quality_combo.addItems(["Baja", "Media", "Alta", "M√°xima"])
        self.quality_combo.setCurrentText("Alta")
        quality_layout.addWidget(self.quality_combo)
        quality_layout.addStretch()
        
        layout_layout = QHBoxLayout()
        layout_layout.addWidget(QLabel("Disposici√≥n:"))
        self.layout_combo = QComboBox()
        self.layout_combo.addItems(["2x3", "3x2", "1x6", "6x1"])
        self.layout_combo.setCurrentText("2x3")
        layout_layout.addWidget(self.layout_combo)
        layout_layout.addStretch()
        
        display_layout_group.addLayout(quality_layout)
        display_layout_group.addLayout(layout_layout)
        
        display_layout.addWidget(display_group)
        display_layout.addStretch()
        
        tabs.addTab(recording_tab, "Grabaci√≥n")
        tabs.addTab(display_tab, "Visualizaci√≥n")
        
        # Botones
        button_layout = QHBoxLayout()
        save_btn = QPushButton("Guardar Configuraci√≥n")
        cancel_btn = QPushButton("Cancelar")
        
        save_btn.clicked.connect(self.accept)
        cancel_btn.clicked.connect(self.reject)
        
        button_layout.addStretch()
        button_layout.addWidget(save_btn)
        button_layout.addWidget(cancel_btn)
        
        layout.addWidget(title)
        layout.addWidget(tabs)
        layout.addLayout(button_layout)
    
    def apply_modern_style(self):
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f0f8ff, stop:1 #e6f3ff);
                border: 2px solid #b8d4f0;
                border-radius: 12px;
            }
            QLabel {
                color: #2c5aa0;
                font-family: Segoe UI;
            }
            QGroupBox {
                color: #2c5aa0;
                font-weight: bold;
                font-family: Segoe UI;
                border: 1px solid #a8c8f0;
                border-radius: 8px;
                margin-top: 1ex;
                padding-top: 10px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e6f2ff, stop:1 #d9ebff);
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #2c5aa0;
            }
            QCheckBox, QLabel {
                color: #2c5aa0;
                font-family: Segoe UI;
            }
            QCheckBox::indicator {
                width: 15px;
                height: 15px;
                border-radius: 3px;
                border: 2px solid #a8c8f0;
                background-color: #e6f2ff;
            }
            QCheckBox::indicator:checked {
                background-color: #4a90e2;
                border: 2px solid #4a90e2;
            }
            QTabWidget::pane {
                border: 1px solid #a8c8f0;
                background-color: #e6f2ff;
                border-radius: 8px;
            }
            QTabBar::tab {
                background-color: #d8e8ff;
                color: #2c5aa0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-family: Segoe UI;
            }
            QTabBar::tab:selected {
                background-color: #4a90e2;
                color: white;
            }
            QPushButton {
                background-color: #4a90e2;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-family: Segoe UI;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #3a80d2;
            }
            QPushButton:pressed {
                background-color: #2a70c2;
            }
            QSpinBox, QComboBox {
                background-color: #e6f2ff;
                color: #2c5aa0;
                border: 1px solid #a8c8f0;
                border-radius: 4px;
                padding: 4px;
                font-family: Segoe UI;
            }
        """)

class SecuritySystemGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.cameras = []
        self.recording_all = False
        self.setup_cameras()
        self.init_ui()
        
    def setup_cameras(self):
        cameras_data = [
            ("Entrada Principal", "Exterior"),
            ("Recepci√≥n", "Interior"),
            ("Estacionamiento", "Exterior"),
            ("Almac√©n", "Interior"),
            ("Oficinas", "Interior"),
            ("Salida Emergencia", "Exterior")
        ]
        
        for i, (name, location) in enumerate(cameras_data):
            self.cameras.append(CameraWidget(i + 1, name, location))
    
    def init_ui(self):
        self.setWindowTitle("Sistema de Seguridad - Panel de Control")
        self.setGeometry(100, 100, 1600, 1000)
        
        # Aplicar estilo moderno
        self.apply_modern_style()
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)
        
        # Panel lateral
        sidebar = self.create_sidebar()
        main_layout.addWidget(sidebar)
        
        # √Årea principal de c√°maras (ocupa todo el espacio restante)
        camera_area = self.create_camera_area()
        main_layout.addWidget(camera_area, 1)
        
        # Barra de estado
        self.setup_statusbar()
        
        # Barra de herramientas
        self.setup_toolbar()
    
    def apply_modern_style(self):
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f5fbff, stop:1 #e8f4ff);
                color: #2c5aa0;
                font-family: Segoe UI;
            }
            QWidget {
                background: transparent;
            }
        """)
    
    def create_sidebar(self):
        sidebar = QWidget()
        sidebar.setFixedWidth(280)
        sidebar.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #e6f2ff, stop:1 #d9ebff);
                border: 2px solid #b8d4f0;
                border-radius: 12px;
            }
        """)
        
        layout = QVBoxLayout(sidebar)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)
        
        # T√≠tulo
        title = QLabel("SISTEMA DE\nSEGURIDAD")
        title.setFont(QFont("Segoe UI", 18, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            QLabel {
                color: #2c5aa0;
                padding: 15px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #d8e8ff, stop:1 #c8e0ff);
                border-radius: 10px;
                border: 2px solid #a8c8f0;
            }
        """)
        
        # Lista de c√°maras
        cameras_label = QLabel("C√°maras Conectadas:")
        cameras_label.setFont(QFont("Segoe UI", 11, QFont.Bold))
        cameras_label.setStyleSheet("color: #2c5aa0;")
        
        cameras_list = QListWidget()
        cameras_list.setFont(QFont("Segoe UI", 10))
        cameras_list.setStyleSheet("""
            QListWidget {
                background-color: #e6f2ff;
                border: 2px solid #a8c8f0;
                border-radius: 8px;
                padding: 5px;
                color: #2c5aa0;
            }
            QListWidget::item {
                padding: 10px;
                border-bottom: 1px solid #b8d4f0;
                border-radius: 6px;
                margin: 2px;
            }
            QListWidget::item:selected {
                background-color: #4a90e2;
                color: white;
            }
            QListWidget::item:hover {
                background-color: #d8e8ff;
            }
        """)
        
        for camera in self.cameras:
            item = QListWidgetItem(f"‚óè {camera.name} - {camera.location}")
            cameras_list.addItem(item)
        
        # Controles del sistema
        controls_group = QGroupBox("Controles del Sistema")
        controls_group.setFont(QFont("Segoe UI", 11, QFont.Bold))
        controls_group.setStyleSheet("""
            QGroupBox {
                color: #2c5aa0;
                border: 2px solid #a8c8f0;
                border-radius: 10px;
                margin-top: 1ex;
                padding-top: 15px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e6f2ff, stop:1 #d9ebff);
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #2c5aa0;
            }
        """)
        
        controls_layout = QVBoxLayout(controls_group)
        controls_layout.setSpacing(10)
        
        # Botones de control con estilo moderno
        self.record_btn = QPushButton("‚è∫Ô∏è INICIAR GRABACI√ìN")
        self.snapshot_btn = QPushButton("üì∏ CAPTURAR IMAGEN")
        self.playback_btn = QPushButton("‚è™ REPRODUCCI√ìN")
        self.settings_btn = QPushButton("‚öôÔ∏è CONFIGURACI√ìN")
        self.alerts_btn = QPushButton("üîî ALERTAS")
        self.export_btn = QPushButton("üìÅ EXPORTAR")
        self.emergency_btn = QPushButton("üö® EMERGENCIA")
        
        # Aplicar estilo a los botones
        buttons = [self.record_btn, self.snapshot_btn, self.playback_btn,
                  self.settings_btn, self.alerts_btn, self.export_btn, self.emergency_btn]
        
        for btn in buttons:
            btn.setMinimumHeight(45)
            btn.setFont(QFont("Segoe UI", 10))
            if btn == self.record_btn:
                btn.setStyleSheet("""
                    QPushButton {
                        background-color: #4a90e2;
                        color: white;
                        font-weight: bold;
                        border: none;
                        border-radius: 8px;
                    }
                    QPushButton:hover {
                        background-color: #3a80d2;
                    }
                    QPushButton:pressed {
                        background-color: #2a70c2;
                    }
                """)
            elif btn == self.emergency_btn:
                btn.setStyleSheet("""
                    QPushButton {
                        background-color: #ff6b6b;
                        color: white;
                        font-weight: bold;
                        border: none;
                        border-radius: 8px;
                    }
                    QPushButton:hover {
                        background-color: #ff5a5a;
                    }
                    QPushButton:pressed {
                        background-color: #ff4a4a;
                    }
                """)
            else:
                btn.setStyleSheet("""
                    QPushButton {
                        background-color: #a8c8f0;
                        color: #2c5aa0;
                        font-weight: bold;
                        border: none;
                        border-radius: 8px;
                    }
                    QPushButton:hover {
                        background-color: #98b8e0;
                    }
                    QPushButton:pressed {
                        background-color: #88a8d0;
                    }
                """)
        
        # Conectar se√±ales
        self.record_btn.clicked.connect(self.toggle_recording)
        self.settings_btn.clicked.connect(self.show_settings)
        self.emergency_btn.clicked.connect(self.emergency_protocol)
        self.snapshot_btn.clicked.connect(self.capture_snapshot)
        self.alerts_btn.clicked.connect(self.show_alerts)
        
        # Agregar botones al layout
        controls_layout.addWidget(self.record_btn)
        controls_layout.addWidget(self.snapshot_btn)
        controls_layout.addWidget(self.playback_btn)
        controls_layout.addWidget(self.settings_btn)
        controls_layout.addWidget(self.alerts_btn)
        controls_layout.addWidget(self.export_btn)
        controls_layout.addWidget(self.emergency_btn)
        
        # Agregar al layout principal
        layout.addWidget(title)
        layout.addWidget(cameras_label)
        layout.addWidget(cameras_list)
        layout.addWidget(controls_group)
        layout.addStretch()
        
        return sidebar
    
    def create_camera_area(self):
        # Crear un √°rea de scroll para las c√°maras
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                background: transparent;
                border: none;
            }
            QScrollArea > QWidget > QWidget {
                background: transparent;
            }
        """)
        
        content = QWidget()
        layout = QGridLayout(content)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(20)
        layout.setAlignment(Qt.AlignCenter)
        
        # Configurar el grid para que las c√°maras se expandan
        for i in range(2):
            layout.setRowStretch(i, 1)
        for j in range(3):
            layout.setColumnStretch(j, 1)
        
        # Agregar c√°maras en grid 2x3
        for i, camera in enumerate(self.cameras):
            row = i // 3
            col = i % 3
            layout.addWidget(camera, row, col)
            camera.setMinimumSize(400, 300)
        
        scroll_area.setWidget(content)
        return scroll_area
    
    def setup_toolbar(self):
        toolbar = QToolBar()
        toolbar.setIconSize(QSize(28, 28))
        toolbar.setMovable(False)
        toolbar.setStyleSheet("""
            QToolBar {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #d8e8ff, stop:1 #c8e0ff);
                border: none;
                border-bottom: 2px solid #b8d4f0;
                spacing: 8px;
                padding: 8px;
            }
            QToolButton {
                color: #2c5aa0;
                background-color: #e6f2ff;
                border: 2px solid #a8c8f0;
                border-radius: 8px;
                padding: 10px 15px;
                font-family: Segoe UI;
                font-size: 11px;
            }
            QToolButton:hover {
                background-color: #d8e8ff;
                border: 2px solid #4a90e2;
            }
            QToolButton:pressed {
                background-color: #c8e0ff;
            }
        """)
        
        self.addToolBar(toolbar)
        
        # Botones de la toolbar
        dashboard_action = QAction("üìä Dashboard", self)
        dashboard_action.triggered.connect(self.show_dashboard)
        toolbar.addAction(dashboard_action)
        
        reports_action = QAction("üìà Reportes", self)
        reports_action.triggered.connect(self.show_reports)
        toolbar.addAction(reports_action)
        
        toolbar.addSeparator()
        
        zoom_action = QAction("üîç Zoom", self)
        zoom_action.triggered.connect(self.zoom_view)
        toolbar.addAction(zoom_action)
        
        layout_action = QAction("üîÑ Cambiar Vista", self)
        layout_action.triggered.connect(self.change_layout)
        toolbar.addAction(layout_action)
        
        refresh_action = QAction("üîÑ Actualizar", self)
        refresh_action.triggered.connect(self.refresh_view)
        toolbar.addAction(refresh_action)
    
    def setup_statusbar(self):
        statusbar = QStatusBar()
        statusbar.setStyleSheet("""
            QStatusBar {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #d8e8ff, stop:1 #c8e0ff);
                color: #2c5aa0;
                border: none;
                border-top: 2px solid #b8d4f0;
                font-family: Segoe UI;
                font-size: 10px;
            }
        """)
        
        self.setStatusBar(statusbar)
        
        # Informaci√≥n del sistema
        self.system_status = QLabel("‚óè Sistema: Online")
        self.system_status.setStyleSheet("color: #4CAF50; font-family: Segoe UI;")
        
        self.recording_status = QLabel("‚è∫Ô∏è Grabaci√≥n: Inactiva")
        self.recording_status.setStyleSheet("color: #2c5aa0; font-family: Segoe UI;")
        
        self.storage_status = QLabel("üíæ Almacenamiento: 65%")
        self.storage_status.setStyleSheet("color: #2c5aa0; font-family: Segoe UI;")
        
        self.time_label = QLabel()
        self.time_label.setStyleSheet("color: #2c5aa0; font-family: Segoe UI; font-weight: bold;")
        
        statusbar.addWidget(self.system_status)
        statusbar.addPermanentWidget(self.recording_status)
        statusbar.addPermanentWidget(self.storage_status)
        statusbar.addPermanentWidget(self.time_label)
        
        # Actualizar hora
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
        self.update_time()
    
    def update_time(self):
        current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        self.time_label.setText(current_time)
    
    def toggle_recording(self):
        self.recording_all = not self.recording_all
        
        for camera in self.cameras:
            camera.set_recording(self.recording_all)
        
        if self.recording_all:
            self.record_btn.setText("‚èπÔ∏è DETENER GRABACI√ìN")
            self.recording_status.setText("‚è∫Ô∏è Grabaci√≥n: Activa")
            self.record_btn.setStyleSheet("""
                QPushButton {
                    background-color: #ff6b6b;
                    color: white;
                    font-weight: bold;
                    border: none;
                    border-radius: 8px;
                }
                QPushButton:hover {
                    background-color: #ff5a5a;
                }
                QPushButton:pressed {
                    background-color: #ff4a4a;
                }
            """)
            QMessageBox.information(self, "Grabaci√≥n", "Grabaci√≥n iniciada en todas las c√°maras")
        else:
            self.record_btn.setText("‚è∫Ô∏è INICIAR GRABACI√ìN")
            self.recording_status.setText("‚è∫Ô∏è Grabaci√≥n: Inactiva")
            self.record_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4a90e2;
                    color: white;
                    font-weight: bold;
                    border: none;
                    border-radius: 8px;
                }
                QPushButton:hover {
                    background-color: #3a80d2;
                }
                QPushButton:pressed {
                    background-color: #2a70c2;
                }
            """)
            QMessageBox.information(self, "Grabaci√≥n", "Grabaci√≥n detenida")
    
    def capture_snapshot(self):
        QMessageBox.information(self, "Captura", "Imagen capturada correctamente")
    
    def show_alerts(self):
        QMessageBox.information(self, "Alertas", "No hay alertas activas en este momento")
    
    def show_settings(self):
        dialog = SettingsDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            QMessageBox.information(self, "Configuraci√≥n", "Configuraci√≥n guardada correctamente")
    
    def emergency_protocol(self):
        reply = QMessageBox.question(
            self, 
            "Protocolo de Emergencia",
            "¬øEst√° seguro de activar el protocolo de emergencia?\n\nSe notificar√° a las autoridades correspondientes.",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            QMessageBox.warning(
                self, 
                "Emergencia Activada",
                "Protocolo de emergencia activado. Autoridades notificadas."
            )
    
    def show_dashboard(self):
        QMessageBox.information(self, "Dashboard", "Abriendo panel de control avanzado...")
    
    def show_reports(self):
        QMessageBox.information(self, "Reportes", "Generando reportes del sistema...")
    
    def zoom_view(self):
        QMessageBox.information(self, "Zoom", "Modo zoom activado")
    
    def change_layout(self):
        QMessageBox.information(self, "Cambiar Vista", "Cambiando disposici√≥n de c√°maras...")
    
    def refresh_view(self):
        QMessageBox.information(self, "Actualizar", "Vista actualizada")

def main():
    app = QApplication(sys.argv)
    
    # Establecer estilo de aplicaci√≥n
    app.setStyle('Fusion')
    
    # Crear y mostrar ventana principal
    window = SecuritySystemGUI()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()